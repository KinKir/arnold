---

- hosts: local
  gather_facts: False
  vars_files:
  - "group_vars/customer/{{ customer }}.yml"
  - "group_vars/env_type/{{ env_type }}.yml"

  tasks:

  - name: Find all templates related to configuration
    find:
      paths: templates/configmap
      patterns: "*.j2"
      recurse: yes
    register: templates_configmap  # Record the list of templates in a variable used below

  - set_fact:
      # For each template file found, generate the file content by injecting variables and
      # build an object with this content ready to create config maps in OpenShift
      templates_configmap_dict: |
        {% set res = {} -%}
        {% for item in templates_configmap.files -%}
          {% set filename = item.path | basename | regex_replace('.j2') -%}
          {% set group = item.path | relpath('templates/configmap') | dirname -%}
          {% set ignored = res.setdefault(group, {}).__setitem__(filename, lookup('template', item.path)) -%}
        {%- endfor %}
        {{ res }}

  - name: Find all customer specific files related to configuration
    find:
      paths: "files/configmap/{{ customer }}"
      recurse: yes
    register: customer_configmap  # Record the list of files in a variable used below

  - set_fact:
      # Customer definitions take precedence over template definitions
      # They may override them if same "group" and same "filename":
      config_dict: |
        {% for item in customer_configmap.files -%}
          {% set filename = item.path | basename -%}
          {% set group = item.path | relpath('files/configmap/' + customer) | dirname -%}
          {% set ignored = templates_configmap_dict.setdefault(group, {}).__setitem__(filename, lookup('file', item.path)) -%}
        {%- endfor %}
        {{ templates_configmap_dict }}

  - name: Actually create the config maps in OpenShift
    openshift_raw:
      state: present
      name: "{{ item.key }}"
      namespace: "{{ project_name }}"
      definition:
        apiVersion: v1
        kind: ConfigMap
        data: "{{ item.valueÂ }}"
    with_dict: "{{ config_dict }}"
