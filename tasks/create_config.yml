# Create ConfigMaps for an app

- name: Find all templates related to configmaps for an app
  find:
    paths: "apps/{{ app }}/configmap"
    patterns: "*.j2"
    recurse: yes
  register: configmap_templates  # Record the list of templates in a variable used below

- name: set_fact configmaps
  set_fact:
    # For each template file found, generate the file content by injecting
    # variables and build an object with this content ready to create config
    # maps in OpenShift
    configmaps: |
      {% set cm = {} -%}
      {% for item in configmap_templates.files -%}
        {% set filename = item.path | basename | regex_replace('.j2') -%}
        {% set group = item.path | dirname | basename -%}
        {% set ignored = cm.setdefault(group, {}).__setitem__(filename, lookup('template', item.path)) -%}
      {%- endfor %}
      {{ cm }}
  when: configmap_templates.matched != 0

- name: Display config maps
  debug: msg="ConfigMaps {{ configmaps }}"

- name: Actually create the config maps in OpenShift
  openshift_raw:
    state: present
    name: "{{ app }}-{{ item.key }}-{{ deployment_stamp }}"
    namespace: "{{ project_name }}"
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        labels:
          app: "{{ app }}"
          service: "{{ item.key }}"
          deployment_stamp: "{{ deployment_stamp }}"
      data: "{{ item.valueÂ }}"
  with_dict: "{{ configmaps }}"
  when: item is not none
